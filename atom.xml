<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">CN1nja&#39;s Blog</title>
    <subtitle type="html"></subtitle>
    <updated>2021-03-07T20:05:56&#43;08:00</updated>
    <id>https://cn1nja.github.io/</id>
    <link rel="alternate" type="text/html" href="https://cn1nja.github.io/" />
    <link rel="self" type="application/atom&#43;xml" href="https://cn1nja.github.io/atom.xml" />
    <author>
            <name>CN1nja</name>
            <uri>https://cn1nja.github.io/</uri>
            
                <email>mikecninja@gmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.81.0">Hugo</generator>
        <entry>
            <title type="text">近世代数</title>
            <link rel="alternate" type="text/html" href="https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/" />
            <id>https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/</id>
            <updated>2021-03-07T19:09:23&#43;08:00</updated>
            <published>2021-03-07T15:09:30&#43;08:00</published>
            <author>
                    <name>CN1nja</name>
                    <uri>https://cn1nja.github.io/</uri>
                    <email>mikecninja@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">代数基本知识: 群： 循环群： 加法循环群： 有限循环群的生成元还具有以下性质： 环： 域： 有限……</summary>
            
                <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-coloref6c00%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86font&#34;&gt;&lt;font color=#EF6C00&gt;代数基本知识:&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-coloref6c00%E7%BE%A4font&#34;&gt;&lt;font color=#EF6C00&gt;群：&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-color6a1b9a%E5%BE%AA%E7%8E%AF%E7%BE%A4font&#34;&gt;&lt;font color=#6A1B9A&gt;循环群：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-color6a1b9a%E5%8A%A0%E6%B3%95%E5%BE%AA%E7%8E%AF%E7%BE%A4font&#34;&gt;&lt;font color=#6A1B9A&gt;加法循环群：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-color6a1b9a%E6%9C%89%E9%99%90%E5%BE%AA%E7%8E%AF%E7%BE%A4%E7%9A%84%E7%94%9F%E6%88%90%E5%85%83%E8%BF%98%E5%85%B7%E6%9C%89%E4%BB%A5%E4%B8%8B%E6%80%A7%E8%B4%A8font&#34;&gt;&lt;font color=#6A1B9A&gt;有限循环群的生成元还具有以下性质：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-coloref6c00%E7%8E%AFfont&#34;&gt;&lt;font color=#EF6C00&gt;环：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-coloref6c00%E5%9F%9Ffont&#34;&gt;&lt;font color=#EF6C00&gt;域：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-coloref6c00%E6%9C%89%E9%99%90%E5%9F%9Ffont&#34;&gt;&lt;font color=#EF6C00&gt;有限域：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-coloref6c00%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%8E%AFfont&#34;&gt;&lt;font color=#EF6C00&gt;多项式环：&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-color6a1b9a%E4%B8%8D%E5%8F%AF%E7%BA%A6%E5%A4%9A%E9%A1%B9%E5%BC%8Ffont&#34;&gt;&lt;font color=#6A1B9A&gt;不可约多项式：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-coloref6c00%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95font&#34;&gt;&lt;font color=#EF6C00&gt;加密算法：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-coloref6c00z_p%E4%B8%8A%E7%9A%84%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0%E9%97%AE%E9%A2%98font&#34;&gt;&lt;font color=#EF6C00&gt;$Z_p$上的离散对数问题：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-coloref6c00-elgamal%E7%AE%97%E6%B3%95font&#34;&gt;&lt;font color=#EF6C00&gt; ElGamal算法：&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-color6a1b9a%E8%AE%A1%E7%AE%97%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0%E7%9A%84%E7%AE%97%E6%B3%95font&#34;&gt;&lt;font color=#6A1B9A&gt;计算离散对数的算法：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-coloref6c00menezes-vanstone%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6font&#34;&gt;&lt;font color=#EF6C00&gt;Menezes-Vanstone椭圆曲线密码体制&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-coloref6c00diffie-hellman%E7%AE%97%E6%B3%95font&#34;&gt;&lt;font color=#EF6C00&gt;Diffie-Hellman算法:&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-coloref6c00%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E4%B8%8A%E7%9A%84diffie-hellman%E7%AE%97%E6%B3%95font&#34;&gt;&lt;font color=#EF6C00&gt;椭圆曲线上的Diffie-Hellman算法:&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-coloref6c00%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6font&#34;&gt;&lt;font color=#EF6C00&gt;椭圆曲线密码体制&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-color6a1b9a1%E6%9C%89%E9%99%90%E5%9F%9F-f_p-%E4%B8%8A-ecc-%E7%9A%84%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%E8%A7%84%E5%88%99font&#34;&gt;&lt;font color=#6A1B9A&gt;1.有限域 $F_p$ 上 $ECC$ 的加法运算规则：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-color6a1b9a%E6%9C%89%E9%99%90%E5%9F%9F%E6%A8%A1pfont&#34;&gt;&lt;font color=#6A1B9A&gt;有限域模p&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-color6a1b9a%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E7%9A%84%E9%98%B6font&#34;&gt;&lt;font color=#6A1B9A&gt;椭圆曲线的阶&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E8%BF%91%E4%B8%96%E4%BB%A3%E6%95%B0/#font-color6a1b9a2ecc%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0font&#34;&gt;&lt;font color=#6A1B9A&gt;2.ECC加密算法描述：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;font-coloref6c00代数基本知识font&#34;&gt;&lt;font color=#EF6C00&gt;代数基本知识:&lt;/font&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;群
环
域
有限域GF()
多项式环

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;font-coloref6c00群font&#34;&gt;&lt;font color=#EF6C00&gt;群：&lt;/font&gt;&lt;/h2&gt;
&lt;p&gt;&lt;font color=#EF6C00&gt;定义：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;设G是非空集合，若在G内定义一种代数运算$\bigodot$，且满足下列4个条件，则称G（对运算$\bigodot$）构成一个群：
&lt;br&gt;
1.封闭性：对任意的a,b $\epsilon$ G，恒有 a$\bigodot$b $\epsilon$ G;
&lt;br&gt;
(2) 结合律：对任意的a,b,c $\epsilon$ G，恒有 (a$\bigodot$b)$\bigodot$c = a$\bigodot$(b$\bigodot$c)
&lt;br&gt;
(3) 有单位元：存在e $\epsilon$ G，对任意的a $\epsilon$ G,有 a$\bigodot$e=e$\bigodot$a=a
&lt;br&gt;
(4) 每个元存在逆元：对任意a $\epsilon$ G,存在b $\epsilon$ G,使得 a$\bigodot$b=b$\bigodot$a=e，称 b 为 a 的逆元。&lt;/p&gt;
&lt;p&gt;&lt;font color=#0288D1&gt;其中运算 $\bigodot$ 可以是通常的乘法或者是加法。若 $\bigodot$ 为乘法，则称G为乘法群，单位元记为1.若$\bigodot$为加法，则称G为加法群，单位元记为0。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;一般情况下，记：&lt;font color=#0288D1&gt;
$\underbrace{a \bigodot a \bigodot \cdots \bigodot a }_{k个}=a^k$&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;群 G 所含元素的个数，称为该群的阶&lt;/strong&gt;。若群G含有有限个元素，则称G为有限群，否则，为无限群。&lt;/p&gt;
&lt;p&gt;若对群G中任何a,b $\epsilon$ G，有 a $\bigodot$ b = b $\bigodot$ a，则称G为交换群或Abel群。&lt;/p&gt;
&lt;h3 id=&#34;font-color6a1b9a循环群font&#34;&gt;&lt;font color=#6A1B9A&gt;循环群：&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;&lt;font color=#EF6C00&gt;定义：&lt;/font&gt;
&lt;br&gt;
设（$G,\cdot）$是一个群如果群 $G$ 中存在一个元素 $\alpha$，使得对群 $G$ 任意元素 $b$ 都存在一个整数 $i$ ,使得 $b=\alpha^i$，则我们称 $G$ 是一个&lt;strong&gt;循环群&lt;/strong&gt;。元素 $\alpha$ 是 $G$ 的一个&lt;strong&gt;生成元&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;font-color6a1b9a加法循环群font&#34;&gt;&lt;font color=#6A1B9A&gt;加法循环群：&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;例：$（Z_6,\oplus）$是循环群，其中$Z_6=${0,1,2,3,4,5} ，$\oplus$ 为模6加法，其生成元为 1 或 5。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成元的含义可以理解为&lt;/strong&gt;：1或5的加法，可以实现群 $Z_6$ 内所有的元素，如：5+5+.....+&lt;/p&gt;
&lt;p&gt;5 mod 6 = 5，35 mod 6 = 5
&lt;br&gt;
10 mod 6 = 4，40 mod 6 = 4，
&lt;br&gt;
15 mod 6 = 3，45 mod 6 = 3
&lt;br&gt;
20 mod 6 = 2，50 mod 6 = 2
&lt;br&gt;
25 mod 6 = 1，55 mod 6= 1
&lt;br&gt;
30 mod 6 = 0，60 mod 6= 0&lt;/p&gt;
&lt;font color=#0288D1&gt;
所以通过 生成元 5 的模6的加法，可以得到群内的所有元素，实现循环群。而 2,3,4不能作为生成元，是因为这些元素的模6加法并不能得到群内所有的元素，且并不是连续循环的数。
&lt;/font&gt;
&lt;p&gt;&lt;strong&gt;乘法循环群&lt;/strong&gt;也是同样的道理。&lt;/p&gt;
&lt;h3 id=&#34;font-color6a1b9a有限循环群的生成元还具有以下性质font&#34;&gt;&lt;font color=#6A1B9A&gt;有限循环群的生成元还具有以下性质：&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;（元素的阶）&lt;/strong&gt;：循环群$（G,\cdot）$，$\alpha$ 为 $G$ 的一个生成元，1为 $G$ 的单位元，$G$ 的阶为 $n$ ,则：
$\alpha^n=1$&lt;/p&gt;
&lt;h2 id=&#34;font-coloref6c00环font&#34;&gt;&lt;font color=#EF6C00&gt;环：&lt;/font&gt;&lt;/h2&gt;
&lt;p&gt;&lt;font color=#EF6C00&gt;定义：&lt;/font&gt;
&lt;br&gt;
若集合R上定义了两种二元运算：+(加法)及 x(乘法)，且满足下列4个条件，则称R对这两种运算构成了一个环，记为 (R,$+$,$\times$):&lt;/p&gt;
&lt;p&gt;(1) (R,$+$)是一个Abel群，其恒等元为零元，用0表示。
&lt;br&gt;
(2) 对任何a,b,c $\epsilon$ R，有$a\times (b \times c)=(a \times b) \times c$
&lt;br&gt;
(3)如果一个环(R,$+$,$\times$)还满足条件：对任意的a,b$\epsilon$ R，有$a\times b =b\times a$，则称环(R,$+$,$\times$)为交换环。&lt;/p&gt;
&lt;h2 id=&#34;font-coloref6c00域font&#34;&gt;&lt;font color=#EF6C00&gt;域：&lt;/font&gt;&lt;/h2&gt;
&lt;p&gt;&lt;font color=#EF6C00&gt;定义：&lt;/font&gt;
&lt;br&gt;
设$F$是一个交换环，若$F$中的所有的非零元素对乘法都存在逆元，则称$F$为一个域。如果一个域所包含的元素是有限的则称此域是有限域，否则称为无限域。&lt;strong&gt;有限域中所含元素的个数称为有限域(R,$+$,$\times$)的阶。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;font-coloref6c00有限域font&#34;&gt;&lt;font color=#EF6C00&gt;有限域：&lt;/font&gt;&lt;/h2&gt;
&lt;p&gt;&lt;font color=#EF6C00&gt;定义1：&lt;/font&gt;
&lt;br&gt;
有限域又常称为Galois域，并以GF(q)或$F_q$表示，其中q表示有限域的阶。&lt;/p&gt;
&lt;p&gt;&lt;font color=#EF6C00&gt;定义2：&lt;/font&gt;
&lt;br&gt;
设$F_1$、$F_2$是两个域，称$F_1$ 到 $F_2$ 的一个可逆映射 $\sigma$ 为一个同构(映射)，如果 $\sigma$ 是保持运算的映射，即对任意的$a,b cF_1$，有：
$\sigma(a+b)=\sigma(a)+\sigma(b)$，$\sigma(a \cdot b)=\sigma(a) \cdot \sigma(b)$&lt;/p&gt;
&lt;p&gt;&lt;font color=#EF6C00&gt;定理3：&lt;/font&gt;
&lt;br&gt;
设$F$是有限域，则有：
&lt;br&gt;
(1)在同构的意义下，阶与$F$相同的有限域只有一个。同阶的有限域必同构。
&lt;br&gt;
(2)有限域 $F$的阶必为某个素数的幂.
&lt;br&gt;
(3)设$F$的阶为 $q=p^n$，p是一个素数，则$F$的任何一个子域的阶为$p^m$，其中m是n的因子。&lt;/p&gt;
&lt;p&gt;(4) 记$F_q^*$为有限域$F_q$的所有非零元构成的集合，&lt;/p&gt;
&lt;p&gt;则$F_q^*$关于乘法做成一个阶为 $q-1$ 的循环群。&lt;/p&gt;
&lt;p&gt;因此，对所有的 $a\epsilon F_q$，有 $a^q=a$ 。&lt;/p&gt;
&lt;p&gt;这个群称为$F_q$的乘法群，乘法群 $F_q^*$ 的生成元称为 $F_q$ 的本原元，共有 $\phi(q-1)$ 个本原元。&lt;/p&gt;
&lt;p&gt;(5)  设$F_q$(其中$q=p^n$)是一个有限域，则对任何 $a,b\epsilon F_q$及非负整数 $k\geqslant 0$，有：
$(a+b)^{p^k}=a^{p^k}+b^{p^k}$
&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;font-coloref6c00多项式环font&#34;&gt;&lt;font color=#EF6C00&gt;多项式环：&lt;/font&gt;&lt;/h2&gt;
&lt;p&gt;&lt;font color=#EF6C00&gt;定义：&lt;/font&gt;
&lt;br&gt;
设$F$是一个域，多项式$f(x)=a_nx^n+\cdot\cdot\cdot+a_1x+a_0$，其中$a_i\epsilon F$，$n\epsilon N$。
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;若$a_n \neq 0$，称n为该多项式的&lt;strong&gt;次数&lt;/strong&gt;，称$a_n$为&lt;strong&gt;首项系数&lt;/strong&gt;。
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;对于域 $F$ 上 $x$ 的多项式的全体组成的集合记为 $F[x]$ 。 多项式 $a(x)$ 的次数记为 $deg(a(x))$
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;设存在多项式 $f(x)与g(x)$，满足：
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;1.加法运算： $f(x)+g(x) \epsilon F[x]$
&lt;br&gt;
2.乘法运算： $f(x)\cdot g(x) \epsilon F[x]$&lt;/p&gt;
&lt;p&gt;容易验证 $F[x]$ 对这样定义的多项式加法与乘法构成一个交换环，称为多项式交换环。&lt;/p&gt;
&lt;h3 id=&#34;font-color6a1b9a不可约多项式font&#34;&gt;&lt;font color=#6A1B9A&gt;不可约多项式：&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;&lt;font color=#EF6C00&gt;定义：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;设 $f(x)$ 是 $F[x]$ 上的一个次数大于零的多项式，如果它不能分解成两个低次数的多项式的乘积，则称 $f(x)$ 是 $F$ 上的不可约多项式。&lt;/p&gt;
&lt;p&gt;设 $p(x)$ 是 $F[x]$ 中的 $n$ 次不可约多项式，令 $F[x]_{p(x)}$ 为 $F[x]$ 中所有次数小于 $n$ 的多项式的集合。&lt;/p&gt;
&lt;p&gt;定义 $F[x]_{p(x)}$ 上的二元运算 $\oplus$ 和 $\otimes$ 如下：&lt;/p&gt;
&lt;p&gt;任取 $a(x),b(x)\epsilon F[x]_{p(x)}$，&lt;/p&gt;
&lt;p&gt;$a(x)\oplus b(x)= (a(x)+b(x)) mod$ $p(x)$
&lt;br&gt;
$a(x)\otimes b(x)= (a(x)\cdot b(x)) mod$ $p(x)$&lt;/p&gt;
&lt;h2 id=&#34;font-coloref6c00加密算法font&#34;&gt;&lt;font color=#EF6C00&gt;加密算法：&lt;/font&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;ElGamal算法
Menezes-Vanstone椭圆曲线密码体制
Diffie-Hellman算法
椭圆曲线上的Diffie-Hellman算法
椭圆曲线加密ECC
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;font-coloref6c00z_p上的离散对数问题font&#34;&gt;&lt;font color=#EF6C00&gt;$Z_p$上的离散对数问题：&lt;/font&gt;&lt;/h2&gt;
&lt;p&gt;$Z_p$上的离散对数问题是指对于循环群 $Z_p$ （p是一个素数），$\alpha \epsilon Z_p$是群 $Z_p$ 的生成元，对于任意的 $c\epsilon Z_p$，寻找唯一 的整数 $d（0\leqslant d\leqslant p-1）$满足：
&lt;font color=#0288D1&gt; $$C\equiv a^d (modp)$$
我们把整数 $d$ 记为 $log_{\alpha}c$，并称之为离散对数。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&#34;font-coloref6c00-elgamal算法font&#34;&gt;&lt;font color=#EF6C00&gt; ElGamal算法：&lt;/font&gt;&lt;/h2&gt;
&lt;p&gt;&lt;font color=#EF6C00&gt;背景：&lt;/font&gt;ElGamal是建立在解有限乘法群上的离散对数问题的困难性基础上的一种公钥密码体制。
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;算法描述：
&lt;br&gt;
(1) 公开参数：取大素数 $p$ ，并取 $\alpha$ 是乘法群 $Z_p^*=$ { $1,\cdot\cdot\cdot,p-1$} 的一个生成元。
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;(2) 密钥生成：随机选取整数 $d$：$0 &amp;lt; d &amp;lt; (p-1)$
并计算 $\beta =\alpha^d$ $mod$ $p$。
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;公开参数：$p 和 \alpha$
&lt;br&gt;
公钥：$\beta$
&lt;br&gt;
私钥：$d$&lt;/p&gt;
&lt;p&gt;(3) 加密运算：对于明文 $m$  ，选取随机整数 $k$ :$0 &amp;lt; k &amp;lt; (p-1)$，计算：
&lt;br&gt;
$c_1=\alpha^k$ $mod$ $p$，
&lt;br&gt;
$c_2=m\beta^k$ $mod$ $p$
&lt;br&gt;
得到密文 $c=(c_1,c_2)$&lt;/p&gt;
&lt;p&gt;(4) 解密运算：对于密文 $c=(c_1,c_2)$ ，用私钥 $d$ 解密。&lt;/p&gt;
&lt;p&gt;$m=c_2(c_1 ^ d)^{-1}$ $mod$ $p$&lt;/p&gt;
&lt;h3 id=&#34;font-color6a1b9a计算离散对数的算法font&#34;&gt;&lt;font color=#6A1B9A&gt;计算离散对数的算法：&lt;/font&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;1. Shanks算法
2. 小步大步发（baby-step 、giant-step）算法
3. Pohlig-Hellman算法
4. 指数演算法(index-calculus)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;font-coloref6c00menezes-vanstone椭圆曲线密码体制font&#34;&gt;&lt;font color=#EF6C00&gt;Menezes-Vanstone椭圆曲线密码体制&lt;/font&gt;&lt;/h2&gt;
&lt;p&gt;&lt;font color=#EF6C00&gt;背景：&lt;/font&gt;Menezes-Vanstone椭圆曲线密码体制是ElGamal密码体制在椭圆曲线上的模拟。&lt;/p&gt;
&lt;p&gt;算法描述：&lt;/p&gt;
&lt;p&gt;(1) 公开参数：设 $p&amp;gt;3$是一个素数， E是有限域 $F_p$ 上的由方程 $y^2=x^3+ax+b$表示的椭圆曲线，$E(F_p)$是相应的 Abel 群。G是 $E(F_p)$ 中具有较大素数阶 $n$ 的一个点。&lt;/p&gt;
&lt;p&gt;(2) 生成密钥：随机选取整数 $d$ : $2\leqslant n\leqslant n-1$，计算 $P=dG$。
&lt;br&gt;
$d$是私钥
&lt;br&gt;
$P$是公钥&lt;/p&gt;
&lt;p&gt;(3) 加密运算：对任意明文 $m=(m_1,m_2)$，随机选取一个整数 $k$：$1\leqslant k\leqslant n-1$，使得$(x,y)=kP$，满足 $x$ 与 $y$ 均为非零元素。并计算：&lt;/p&gt;
&lt;p&gt;$C_0=kG$
&lt;br&gt;
$c_1=m_1x$ $mod$ $p$
&lt;br&gt;
$c_2=m_2y$ $mod$ $p$
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;得到密文为 $(C_0,c_1,c_2)$&lt;/p&gt;
&lt;p&gt;(4) 解密运算：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算 $dC_0=(x,y)$&lt;/li&gt;
&lt;li&gt;计算 $m_1=c_1x^{-1}$ $mod$ $p$&lt;/li&gt;
&lt;li&gt;计算 $m_2=c_2y^{-1}$ $mod$ $p$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;即得明文为 $(m_1,m_2)$&lt;/p&gt;
&lt;h2 id=&#34;font-coloref6c00diffie-hellman算法font&#34;&gt;&lt;font color=#EF6C00&gt;Diffie-Hellman算法:&lt;/font&gt;&lt;/h2&gt;
&lt;p&gt;&lt;font color=#EF6C00&gt;背景：&lt;/font&gt;Diffie-Hellman算法由Whitfield Diffie 和 Martin Hellman 提出，该算法的安全性也是基于一般有限域上的离散对数问题的难解性。&lt;/p&gt;
&lt;p&gt;算法描述：&lt;/p&gt;
&lt;p&gt;(1) 假设Alice和Bob之间要建立一个共享密钥。Alice和Bob首先选定一个大素数 $p$ ，并选 $g$ 为乘法群 $F_p^*$ 中的一个生成元。&lt;/p&gt;
&lt;p&gt;(2) Alice选取一个私钥 a(整数)：$1\leqslant a\leqslant p-2$，计算 $A=g^a$ $mod$ $p$。发送A给Bob。&lt;/p&gt;
&lt;p&gt;(3) Bob选取一个私钥 b(整数)：$1\leqslant b\leqslant p-2$，计算 $B=g^b$ $mod$ $p$。发送B给Alice。&lt;/p&gt;
&lt;p&gt;(4) Alice 计算 $k=B^a$ $mod$ $p$
&lt;br&gt;
(5) Bob 计算 $k=A^b$ $mod$ $p$&lt;/p&gt;
&lt;p&gt;因为 $B ^ a = (g ^ b)^a = g^{ab} = (g ^ a)^b = A^b$ $mod$ $p$，Alice与Bob计算得到的 $k$ 是相同的。这样的 $k$ 可以作为通信的共享密钥&lt;/p&gt;
&lt;p&gt;由于 $a$ 与 $b$ 是保密的，所以即使攻击者知道了 $p、g、A、B$，也很难获得 Alice 与 Bob 的共享密钥 $k$。因为攻击者要想获得 $k$ ，则需要先解决离散对数问题 $A=g^x$ $mod$ $p$ 或 $B=g^x$ $mod$ $p$ ,而这是困难的。&lt;/p&gt;
&lt;h2 id=&#34;font-coloref6c00椭圆曲线上的diffie-hellman算法font&#34;&gt;&lt;font color=#EF6C00&gt;椭圆曲线上的Diffie-Hellman算法:&lt;/font&gt;&lt;/h2&gt;
&lt;p&gt;(1) Alice和Bob之间要建立一个共享密钥。
选取公共参数：取 $q&amp;gt;3$ 是某个素数幂，$E是F_q$上的椭圆曲线，$E(F_q)$ 是相应的 Abel 群，G 是 $E(F_q)$ 中的一个具有较大素数阶 $n$ 的点。&lt;/p&gt;
&lt;p&gt;(2) Alice选取一个私钥 a(整数)：$1\leqslant a\leqslant n-2$，计算 $A=aG$ 。发送A给Bob。&lt;/p&gt;
&lt;p&gt;(3) Bob选取一个私钥 b(整数)：$1\leqslant b\leqslant n-2$，计算 $B=bG$ 。发送B给Alice。&lt;/p&gt;
&lt;p&gt;(4) Alice 计算 $K=aB$
&lt;br&gt;
(5) Bob 计算 $K=bA$&lt;/p&gt;
&lt;p&gt;显然 Alice 与 Bob 计算得到的 $K$ 是相同的：
&lt;br&gt;
$aB=a(bG)=(ab)G=b(aG)=bA$&lt;/p&gt;
&lt;p&gt;$K$ 即为 Alice 与 Bob 之间的共享密钥。&lt;/p&gt;
&lt;p&gt;椭圆曲线上的Diffie-Hellman密钥交换算法的安全性基于椭圆曲线上离散对数问题的难解性。&lt;/p&gt;
&lt;h2 id=&#34;font-coloref6c00椭圆曲线密码体制font&#34;&gt;&lt;font color=#EF6C00&gt;椭圆曲线密码体制&lt;/font&gt;&lt;/h2&gt;
&lt;h3 id=&#34;font-color6a1b9a1有限域-f_p-上-ecc-的加法运算规则font&#34;&gt;&lt;font color=#6A1B9A&gt;1.有限域 $F_p$ 上 $ECC$ 的加法运算规则：&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;设 $p&amp;gt;3$ 是一个素数，那么有限域 $F_p$ 上的椭圆曲线 $E$ 可以表示成方程：
&lt;font color=#EF6C00&gt;
$$y^2 = x^3 + ax + b(mod p)$$&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;椭圆曲线$E_p(a,b)$，$p$为素数，$x,y \epsilon[0,p-1]$
，$y^2 = x^3 + ax + b$ ($mod$ $p$)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里 $a,b \epsilon F_q$，满足：
&lt;font color=#EF6C00&gt;
$$4a^3+27b^2 \neq 0 mod  p$$
&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;集合 $E(F_p)$ 中的加法运算定义为：&lt;/strong&gt;
对任何 $P=(x_1,y_1) \epsilon E(F_p)$，$Q=(x_2,y_2) \epsilon E(F_p)$&lt;/p&gt;
&lt;p&gt;1.$P+O=P$  （$O$为无穷远点）&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt; $$P+Q=\begin{cases}O，&amp;如果x_1=x_2,y_1=-y_2\\  \\(x_3,y_3),&amp;否则\end{cases}$$ &lt;/div&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;div&gt; $\begin{cases}x_3=\lambda^2-x_1-x_2\\y_3=\lambda(x_1-x_3)-y_1\end{cases}$ &lt;/div&gt;
&lt;div&gt; $$\lambda =\begin{cases}
\frac{y_2-y_1}{x_2-x_1},&amp;如果 P\neq Q\\
\\
 \frac{3x_1^2+a}{2y_1},&amp;如果P=Q  \\
 \end{cases}$$
 &lt;/div&gt;
&lt;p&gt;如果 $P+Q=O$,则记 $Q=-P$ ，并称 $-P$ 为 $P$ 的负元。&lt;/p&gt;
&lt;p&gt;一般地，我们将 $\underbrace{P+P+\cdot\cdot\cdot+P}_{n次}$ 记为 $np$ ，&lt;/p&gt;
&lt;p&gt;即 $np=$ $\underbrace{P+P+\cdot\cdot\cdot+P}_{n次}$，同时，定义：$nP=O$（零元）&lt;/p&gt;
&lt;h3 id=&#34;font-color6a1b9a有限域模pfont&#34;&gt;&lt;font color=#6A1B9A&gt;有限域模p&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;一个有限域是整数模 $p$ 的集合（integers mod p,p为素数），可表示为 $z/p$, $GF(p)$,或者 $F_p$，一般用 $F_p$。&lt;/p&gt;
&lt;h3 id=&#34;font-color6a1b9a椭圆曲线的阶font&#34;&gt;&lt;font color=#6A1B9A&gt;椭圆曲线的阶&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;定义：一个群有多少个点叫做这个群的 “阶” （order）&lt;/p&gt;
&lt;h3 id=&#34;font-color6a1b9a2ecc加密算法描述font&#34;&gt;&lt;font color=#6A1B9A&gt;2.ECC加密算法描述：&lt;/font&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;点G称为基点（base point）&lt;/li&gt;
&lt;li&gt;$k$为私钥&lt;/li&gt;
&lt;li&gt;$K$为公钥&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中$K=kG$， $K、G$ 为椭圆曲线 $E_p(a,b)$ 上的点，&lt;strong&gt;$n$ 为 $G$ 的阶&lt;/strong&gt; $(nG=O无穷大)$，$k$为小于$n$的整数。对于给定的$k$和$G$，根据加法法则，计算$K$很容易。而基于离散对数的难解性，给定$K$和$G$,求$k$则非常困难。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;公开参数&lt;/strong&gt;：Alice选取一条椭圆曲线$E_p(a,b)$，并选取椭圆曲线上的一点，作为基点G。
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成公钥&lt;/strong&gt;：Alice 选取一个&lt;strong&gt;私钥&lt;/strong&gt; $k$ $(k &amp;lt; n)$，生成&lt;strong&gt;公钥&lt;/strong&gt; $K=kG$。
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alice 将$E_p(a,b)$ 和点K，G传给用户 Bob
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;加密运算&lt;/strong&gt;：Bob 将 &lt;strong&gt;明文&lt;/strong&gt; 编码到 $E_p(a,b)$ 上的一点 $M$ ,取一个随机数 $r(r &amp;lt; n)$。
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bob 计算点 $C_1=M+rK$ 和 $C_2=rG$
&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户Bob将 $C_1、C_2$ 传给用户 A 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解密运算&lt;/strong&gt;： Alice计算：$M=C_1-kC_2$，将 M 解码就得到明文了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(这里:$C_1-kC_2=M+rK-k(rG)=M+rkG-rkG=M$)&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://cn1nja.github.io/categories/crypto-study/" term="Crypto Study" label="Crypto Study" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://cn1nja.github.io/tags/math%E5%9F%BA%E7%A1%80/" term="Math基础" label="Math基础" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">《数论》</title>
            <link rel="alternate" type="text/html" href="https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/" />
            <id>https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/</id>
            <updated>2021-03-07T15:04:04&#43;08:00</updated>
            <published>2021-02-25T14:45:02&#43;08:00</published>
            <author>
                    <name>CN1nja</name>
                    <uri>https://cn1nja.github.io/</uri>
                    <email>mikecninja@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">1.素数： 定义： 关于素数有以下事实： 2.最大公约数与最小公倍数 定义 1： 定义 2： 3.欧……</summary>
            
                <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-color1976d2-1%E7%B4%A0%E6%95%B0font&#34;&gt;&lt;font color=#1976D2&gt; 1.素数：&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-colord84315-%E5%AE%9A%E4%B9%89font&#34;&gt;&lt;font color=#D84315&gt; 定义：&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-colorffb300%E5%85%B3%E4%BA%8E%E7%B4%A0%E6%95%B0%E6%9C%89%E4%BB%A5%E4%B8%8B%E4%BA%8B%E5%AE%9Efont&#34;&gt;&lt;font color=#FFB300&gt;关于素数有以下事实：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-color1976d22%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E4%B8%8E%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0font&#34;&gt;&lt;font color=#1976D2&gt;2.最大公约数与最小公倍数&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-colord84315%E5%AE%9A%E4%B9%89-1font&#34;&gt;&lt;font color=#D84315&gt;定义 1：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-colord84315%E5%AE%9A%E4%B9%89-2font&#34;&gt;&lt;font color=#D84315&gt;定义 2：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-color1976d23%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0font&#34;&gt;&lt;font color=#1976D2&gt;3.欧拉函数&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-colord84315%E5%AE%9A%E4%B9%89font&#34;&gt;&lt;font color=#D84315&gt;定义：&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-colorff8f00%E6%80%A7%E8%B4%A8font&#34;&gt;&lt;font color=#FF8F00&gt;性质：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-color1976d24%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97euclid%E7%AE%97%E6%B3%95font&#34;&gt;&lt;font color=#1976D2&gt;4.欧几里得(Euclid)算法&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-colord84315%E5%AE%9A%E4%B9%89font-1&#34;&gt;&lt;font color=#D84315&gt;定义：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-color1976d25%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95font&#34;&gt;&lt;font color=#1976D2&gt;5.扩展欧几里得算法&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-colord84315%E5%AE%9A%E4%B9%89font-2&#34;&gt;&lt;font color=#D84315&gt;定义：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-color1976d26%E5%90%8C%E4%BD%99font&#34;&gt;&lt;font color=#1976D2&gt;6.同余&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-colord84315%E5%AE%9A%E4%B9%89font-3&#34;&gt;&lt;font color=#D84315&gt;定义：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-color1976d2%E5%90%8C%E4%BD%99%E7%9A%84%E6%80%A7%E8%B4%A8font&#34;&gt;&lt;font color=#1976D2&gt;同余的性质&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-colorff8f00%E6%80%A7%E8%B4%A8-1font&#34;&gt;&lt;font color=#FF8F00&gt;性质 1：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-colorff8f00%E6%80%A7%E8%B4%A8-2font&#34;&gt;&lt;font color=#FF8F00&gt;性质 2：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-color1976d27%E6%A8%A1%E8%BF%90%E7%AE%97font&#34;&gt;&lt;font color=#1976D2&gt;7.模运算&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-colord84315%E5%AE%9A%E4%B9%89font-4&#34;&gt;&lt;font color=#D84315&gt;定义：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-color1976d28%E9%80%86font&#34;&gt;&lt;font color=#1976D2&gt;8.逆&lt;/font&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-colord84315%E5%AE%9A%E4%B9%89font-5&#34;&gt;&lt;font color=#D84315&gt;定义：&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-color1976d29%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86font&#34;&gt;&lt;font color=#1976D2&gt;9.中国剩余定理&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cn1nja.github.io/posts/%E6%95%B0%E8%AE%BA/#font-color1976d210%E9%80%86%E5%85%83%E4%B8%8E%E5%90%8C%E4%BD%99%E5%BC%8F%E5%AE%9A%E7%90%86font&#34;&gt;&lt;font color=#1976D2&gt;10.逆元与同余式定理&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;font-color1976d2-1素数font&#34;&gt;&lt;font color=#1976D2&gt; 1.素数：&lt;/font&gt;&lt;/h2&gt;
&lt;h4 id=&#34;font-colord84315-定义font&#34;&gt;&lt;font color=#D84315&gt; 定义：&lt;/font&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;一个大于1的自然数，除了1和它本身外，

不能被其他自然数整除（除0以外）的数称之为素数（质数）；

否则称为合数。

如：
3×4 = 12,不是素数。

11除了等于11×1以外，不能表示为其它任何两个整数的乘积，

所以11是一个素数。
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;font-colorffb300关于素数有以下事实font&#34;&gt;&lt;font color=#FFB300&gt;关于素数有以下事实：&lt;/font&gt;&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;如果&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p是素数&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，且&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ab&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;表示&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ab&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;能被&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;整除&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，则&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a或&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，即&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;至少整除&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;与&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;中的一个。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre&gt;&lt;code&gt;(2)(算术基本定理) 每个整数n ≥ 2，均可分解成素数幂之积：
&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;
$$n = P_1^{e_1} P_2^{e_2}…P_k^{e_k}$$
&lt;br&gt;
若不计因数的顺序，这个分解式是唯一的。其中 k ≥ 1，$p_i$ $(1 ≤ i ≤ k)$ 是两两互不相同的素数，$e_i$ $(1 ≤ i ≤ k)$ 是正整数。
&lt;br&gt;
&lt;pre&gt;&lt;code&gt;(3) 素数有无穷多个。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;font-color1976d22最大公约数与最小公倍数font&#34;&gt;&lt;font color=#1976D2&gt;2.最大公约数与最小公倍数&lt;/font&gt;&lt;/h2&gt;
&lt;h4 id=&#34;font-colord84315定义-1font&#34;&gt;&lt;font color=#D84315&gt;定义 1：&lt;/font&gt;&lt;/h4&gt;
&lt;p&gt;设 $a_1，a_2$ 是两个整数。如果 $d | a_1$ 且 $d | a_2$，那么 d 就称为是 $a_1$ 和 $a_2$ 的公约数（或公因数）我们把 $a_1$ 和 $a_2$ 的公约数中最大的称为 $a_1$ 和 $a_2$ 的最大公约数，记作 $gcd(a_1,a_2).$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当 $gcd(a_1,a_2) = 1$ 时，我们称 $a_1$ 和 $a_2$ 是互素的。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;font-colord84315定义-2font&#34;&gt;&lt;font color=#D84315&gt;定义 2：&lt;/font&gt;&lt;/h4&gt;
&lt;p&gt;设 $a_1，a_2$ 是两个整数。如果 $a_1 | l 且a_2 | l$ ，那么 $l$ 就称为是 $a_1$ 和 $a_2$ 的公倍数。我们把 $a_1$ 和 $a_2$ 的正的公倍数中的最小的称为 $a_1$ 和 $a_2$ 的最小公倍数，记作 $lcm(a_1,a_2)。$&lt;/p&gt;
&lt;h2 id=&#34;font-color1976d23欧拉函数font&#34;&gt;&lt;font color=#1976D2&gt;3.欧拉函数&lt;/font&gt;&lt;/h2&gt;
&lt;h4 id=&#34;font-colord84315定义font&#34;&gt;&lt;font color=#D84315&gt;定义：&lt;/font&gt;&lt;/h4&gt;
&lt;p&gt;对正整数 $n$，欧拉函数是小于或等于 $n$ 的数中与 $n$ 互质的数的个数，&lt;/p&gt;
&lt;p&gt;记作：$φ(n)$&lt;/p&gt;
&lt;p&gt;例如：$φ(8) = 4$ ,因为 $1，3，5，7$ 均与 $8$ 互质。&lt;/p&gt;
&lt;h5 id=&#34;font-colorff8f00性质font&#34;&gt;&lt;font color=#FF8F00&gt;性质：&lt;/font&gt;&lt;/h5&gt;
&lt;p&gt;(1) 若 $n$ 为一素数 P，则：$φ(P) = P-1$&lt;/p&gt;
&lt;p&gt;(2) 如果 P 是素数，$k≥1$ ,则：$φ(P^k)$ = $(P-1)× P^{k-1}$&lt;/p&gt;
&lt;p&gt;例如 ：求 φ(16)，由于 16 = 2×2×2×2，故 φ(16) = (2-1) ×$2^3$ = 8&lt;/p&gt;
&lt;p&gt;(3) 若 n 为任意两个互质的 数 $a,b$ 的积，则：φ(a*b) = φ(a) × φ(b)&lt;/p&gt;
&lt;p&gt;例：求 φ(40)，由于 40 = 5×8，所以 φ(40) = φ(5) × φ(8) = 4×4 = 16&lt;/p&gt;
&lt;p&gt;(4)对于整数 $n≥2$，根据算术基本定理，$n$ 可以分解成唯一的形如 $n=p_1^{e_1}$$p_2^{e_2}$ ⋯$p_k^{e_k}$ 的分解式，则：$φ(n)=n(1-\frac{1}{p_1})(1-\frac{1}{p_2})⋯(1-\frac{1}{p_k})$&lt;/p&gt;
&lt;h2 id=&#34;font-color1976d24欧几里得euclid算法font&#34;&gt;&lt;font color=#1976D2&gt;4.欧几里得(Euclid)算法&lt;/font&gt;&lt;/h2&gt;
&lt;h4 id=&#34;font-colord84315定义font-1&#34;&gt;&lt;font color=#D84315&gt;定义：&lt;/font&gt;&lt;/h4&gt;
&lt;p&gt;  欧几里得算法又称为辗转相除法，用于求两个数的最大公约数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理：&lt;/strong&gt;$GCD(x,y)$ = $GCD$($y$，$x$ $mod$ $y$) ，$x&amp;gt;y$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.python 代码实现&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GCD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2.python 第三方库：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gmpy2.gcd(a,b)&lt;/strong&gt;     #求 a,b 的最大公约数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gmpy2&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gcd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#求a,b的最大公约数&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Crypto.Util.number&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Crypto.Util.number&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GCD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#求a,b的最大公约数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;font-color1976d25扩展欧几里得算法font&#34;&gt;&lt;font color=#1976D2&gt;5.扩展欧几里得算法&lt;/font&gt;&lt;/h2&gt;
&lt;h4 id=&#34;font-colord84315定义font-2&#34;&gt;&lt;font color=#D84315&gt;定义：&lt;/font&gt;&lt;/h4&gt;
&lt;p&gt;  在已知 $x，y$ 时，求解一组解 $a,b$，使得 $ax+by = GCD(x，y)$&lt;/p&gt;
&lt;p&gt;算法输入：两个正整数 $x$ 和 $y$&lt;/p&gt;
&lt;p&gt;算法输出：$x$ 和 $y$ 的最大公因数 $gcd(x,y)$ 及满足等式 $ax+by=gcd(x,y)$ 的整数 $a$ 和 $b$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;python 代码实现:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gmpy2 库函数 gcdext()&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gmpy2&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;17&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;65537&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#扩展欧几里得算法&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gcdext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 返回元祖tuple ，满足s[1]*x+s[2]*y = 1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;#输出：(mpz(1),mpz(30841),mpz(-8))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 输出:1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;font-color1976d26同余font&#34;&gt;&lt;font color=#1976D2&gt;6.同余&lt;/font&gt;&lt;/h2&gt;
&lt;h4 id=&#34;font-colord84315定义font-3&#34;&gt;&lt;font color=#D84315&gt;定义：&lt;/font&gt;&lt;/h4&gt;
&lt;p&gt;  设 a,b 是整数，$n≠0$，如果 $n|(a-b)$，则称 $a$ 和 $b$ 模 $n$ &lt;strong&gt;同余&lt;/strong&gt;，记为 $a≡b$($mod$ $n$)，整数 $n$ 称为&lt;strong&gt;模数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;  由于 $n|(a-b)$ 等价于 $-n|(a-b)$，所以 $a≡b$($mod$ $n$) 与 $a≡b$ $($ $mod$ $(-n)$ $)$ 等价。因此，一般我们总假定模数 $n≥1$。&lt;/p&gt;
&lt;h4 id=&#34;font-color1976d2同余的性质font&#34;&gt;&lt;font color=#1976D2&gt;同余的性质&lt;/font&gt;&lt;/h4&gt;
&lt;h5 id=&#34;font-colorff8f00性质-1font&#34;&gt;&lt;font color=#FF8F00&gt;性质 1：&lt;/font&gt;&lt;/h5&gt;
&lt;p&gt;(1)自反性：a ≡ a (mod m)&lt;/p&gt;
&lt;p&gt;(2)对称性：a ≡ b (mod m)， b ≡ c (mod m) ，则 a ≡ c (mod m)&lt;/p&gt;
&lt;h5 id=&#34;font-colorff8f00性质-2font&#34;&gt;&lt;font color=#FF8F00&gt;性质 2：&lt;/font&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; 若 $a ≡ b$ ($mod$ $m$)，$c ≡ d$ ($mod$ $m$)&lt;/p&gt;
&lt;p&gt;则：$a±c ≡ b±d$ ($mod$ $m$)，$ac ≡ bd$ ($mod$ $m$)&lt;/p&gt;
&lt;p&gt;特别的，对于一个整数 e,都有 $a±e ≡ b±e$ ($mod$ $m$)，$ae ≡ be$ ($mod$ $m$)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; 若 $a ≡ b$ ($mod$ $m$)，k&amp;gt;0，则 $ak ≡ bk$ $(mod$ $mk)$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt;  若 $a ≡ b$ ($mod$ $m$)，d 是 a，b 的公因数，则 $\frac{a}{d} ≡ \frac{b}{d}$ (mod $\frac{m}{d}$)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(4)&lt;/strong&gt; 若 $a ≡ b$ ($mod$ $m$)，d|m，d&amp;gt;0，则: a ≡ b (mod d)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(5)&lt;/strong&gt; 若 $a ≡ b$ ($mod$ $m$)，则: $a^n$≡$b^n$ (mod m)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(6)&lt;/strong&gt; $(a×b)$ $mod$ $m$ = ($a$ $mod$ $m × b$ $mod$ $m$ ) $mod$ $m$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(7)&lt;/strong&gt; $a^b$ $mod$ $m$ = ($a$ $mod$ $m$)$^b$ $mod$ $m$&lt;/p&gt;
&lt;h2 id=&#34;font-color1976d27模运算font&#34;&gt;&lt;font color=#1976D2&gt;7.模运算&lt;/font&gt;&lt;/h2&gt;
&lt;h4 id=&#34;font-colord84315定义font-4&#34;&gt;&lt;font color=#D84315&gt;定义：&lt;/font&gt;&lt;/h4&gt;
&lt;p&gt;  $a$ 模 $n$ 的运算给出了 $a$ 对模 $n$ 的余数，这种运算称为&lt;strong&gt;模运算&lt;/strong&gt;。注意：模运算的结果是从 0 到 $n-1$ 的一个整数。&lt;/p&gt;
&lt;p&gt;  模运算就像普通的运算一样，它是可交换、可结合、可分配的。而且，对每一个中间结果进行模 $m$ 运算后再进行模 $m$ 运算，其作用与先进行全部运算，然后再进行模 $m$ 运算所得到的结果是一样的。例如：&lt;/p&gt;
&lt;p&gt;$$(a+b) mod m=((a mod m)+(b mod m)) mod m$$&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;$$(a-b)mod m=((a mod m)-(b mod m)) mod m$$&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;$$(a×b)mod m=((a mod m) ×(b mod m)) mod m$$&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;$$(a×(b+c))mod m=((a×b) mod m+(a×c) mod m) mod m$$&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;这些性质对于密码学中的数学计算非常的重要，模运算可以将所有中间结果和最后结果限制在一个范围内。对于一个 $k$ 位的模数 $n$ ，任何、加、减、乘的中间结果将不会超过 $2k$ 位长，这样避免了巨大的中间结果，使得计算机能够有效的处理数据。&lt;/p&gt;
&lt;p&gt;如：计算 $a^8$(mod n)，不要直接进行 7 次乘法和一个大数的模运算：&lt;/p&gt;
&lt;p&gt;$$(a×a×a×a×a×a×a×a)mod n$$&lt;/p&gt;
&lt;p&gt;相反，应该进行三次比较小的乘法和三次比较小的模化简：&lt;/p&gt;
&lt;p&gt;(($a^2$ mod n)$^2$ mod n)$^2$ mod n&lt;/p&gt;
&lt;p&gt;这样就可以避免巨大的中间结果出现。&lt;/p&gt;
&lt;h2 id=&#34;font-color1976d28逆font&#34;&gt;&lt;font color=#1976D2&gt;8.逆&lt;/font&gt;&lt;/h2&gt;
&lt;h4 id=&#34;font-colord84315定义font-5&#34;&gt;&lt;font color=#D84315&gt;定义：&lt;/font&gt;&lt;/h4&gt;
&lt;p&gt;若 m≥1，$gcd(a,m)=1$,则存在 c 使得：&lt;/p&gt;
&lt;p&gt;$$ca≡1(mod m)$$&lt;/p&gt;
&lt;p&gt;我们把 c 称为 a 对模 n 的逆，记作 $a^{-1}$ (mod m)，在模数已经指明的情况下，有时也记作 $a^{-1}$。&lt;/p&gt;
&lt;p&gt;&lt;font color=#1976D2&gt;在(a,m)=1 时，我们可以使用扩展欧几里得算法来求 a 的逆元：$a^{-1}$，这是因为：扩展欧几里得算法可以找到整数 $x$,$y$ 使得 $ax+my=1$，这样 $a^{-1}=x$ ($mod$ $n$)&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&#34;font-color1976d29中国剩余定理font&#34;&gt;&lt;font color=#1976D2&gt;9.中国剩余定理&lt;/font&gt;&lt;/h2&gt;
&lt;p&gt;&lt;font color=#FBC02D&gt;中国剩余定理（Chinese remainder theorem，CRT），又称孙子定理，最早可见于中国南北朝时期（公元 5 世纪）的数学著作《孙子算经》中，为一次同余方程组的起源。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理(CRT):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  设 $m_1,m_2,⋯, m_k$ 是两两互素的正整数，$M=m_1 m_2⋯m_k,$&lt;/p&gt;
&lt;p&gt;$M_i=\frac{M}{m_i} (i=1,2,⋯,k)$,则同余方程组：&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&#34;CRT.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;有唯一解: $x=b_1 M_1 y_1+b_2 M_2 y_2+⋯+b_k M_k y_k$ ($mod$ $M$)&lt;/p&gt;
&lt;p&gt;其中 $M_i y_i≡1$ ($mod$ $m_i$)，i=1,2,⋯,k&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;CRT1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;font-color1976d210逆元与同余式定理font&#34;&gt;&lt;font color=#1976D2&gt;10.逆元与同余式定理&lt;/font&gt;&lt;/h2&gt;
&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;&lt;font color=#26A69A&gt;1.模运算重要公式：&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;(a+b) % m = (a % m + b % m) % m&lt;/p&gt;
&lt;p&gt;(a-b) % m = (a % m - b % m) % m&lt;/p&gt;
&lt;p&gt;(a*b) % m = (a % m * b % m) % m&lt;/p&gt;
&lt;p&gt;$a^b$ % m = (a % m)$^b$ % m&lt;/p&gt;
&lt;br&gt;
&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;&lt;font color=#26A69A&gt;2.威尔逊定理：&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;若 p 为素数，则：$(p-1)!≡-1$ $mod$ $p$ ⟹ 推导：$(p-2)!≡1$ $mod$ $p$;&lt;/p&gt;
&lt;p&gt;其逆定理同样成立。即：若 $(p-1)!≡-1$ $mod$ $p$ ，则 p 为素数&lt;/p&gt;
&lt;br&gt;
&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;&lt;font color=#26A69A&gt;3.二次探测定理：&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;&lt;font color=#D84315&gt;定义：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;若 $p$ 是素数且 0&amp;lt;x&amp;lt;p ，则 $x^2$≡$1(mod p)$ 仅有的两个解为：$x=1或x=p-1$&lt;/p&gt;
&lt;p&gt;证明：由于 $x^2$≡$1$ $mod$ $p$，所以：$x^2$-1≡$0$ $mod$ $p$，即 $(x+1)(x-1)≡0$ $mod$ $p$&lt;/p&gt;
&lt;br&gt;
&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;&lt;font color=#26A69A&gt;4.费马小定理&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;若 a 为正整数，P 是一质数，则：GCD(a,p)=1&lt;/p&gt;
&lt;p&gt;那么 $a^{p-1}$ ≡ $1 (mod p)$，推论:$a^p$ $mod$ $m$≡$a^p$ $^ {mod}$ $^{(m-1)}$&lt;/p&gt;
&lt;p&gt;$a^p$≡$a$ $mod$ $p$，推论: $a^p$ $mod$ $p$=$a$ $mod$ $p$&lt;/p&gt;
&lt;br&gt;
&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=yellow&gt;&lt;font color=#26A69A&gt;5.欧拉定理(Euler)：&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;若 a 与 m 互质，则：$a^{φ(m)}$ ≡1 mod $m$&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://cn1nja.github.io/categories/crypto-study/" term="Crypto Study" label="Crypto Study" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://cn1nja.github.io/tags/math%E5%9F%BA%E7%A1%80/" term="Math基础" label="Math基础" />
                            
                        
                    
                
            
        </entry>
    
</feed>
